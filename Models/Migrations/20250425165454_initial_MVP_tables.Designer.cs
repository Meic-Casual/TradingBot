// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models.Scaffolded;

#nullable disable

namespace Models.Migrations
{
    [DbContext(typeof(DcaBotContext))]
    [Migration("20250425165454_initial_MVP_tables")]
    partial class initial_MVP_tables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Models.Scaffolded.Bot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CurrentAllocation")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("current_allocation");

                    b.Property<decimal>("MaxPriceBasePaddingPercent")
                        .HasPrecision(2, 2)
                        .HasColumnType("decimal(2,2)")
                        .HasColumnName("max_price_base_padding_percent");

                    b.Property<decimal>("OverallAllowance")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("overall_allowance");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int")
                        .HasColumnName("owner_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "OwnerId" }, "Bots_fk1");

                    b.HasIndex(new[] { "Id" }, "id")
                        .IsUnique();

                    b.ToTable("bots", (string)null);
                });

            modelBuilder.Entity("Models.Scaffolded.Botstatesnapshot", b =>
                {
                    b.Property<decimal>("AveragePurchasePrice")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)")
                        .HasColumnName("average_purchase_price");

                    b.Property<int>("BotId")
                        .HasColumnType("int")
                        .HasColumnName("bot_id");

                    b.Property<decimal>("LowestPurchasePrice")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)")
                        .HasColumnName("lowest_purchase_price");

                    b.Property<decimal>("RemainingAllowance")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("remaining_allowance");

                    b.HasIndex(new[] { "BotId" }, "BotStateSnapshots_fk0");

                    b.ToTable("botstatesnapshots", (string)null);
                });

            modelBuilder.Entity("Models.Scaffolded.Purchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BotId")
                        .HasColumnType("int")
                        .HasColumnName("bot_id");

                    b.Property<decimal>("Cost")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)")
                        .HasColumnName("cost");

                    b.Property<decimal>("Price")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)")
                        .HasColumnName("price");

                    b.Property<DateTime>("PurchasedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("purchased_at");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(9, 8)
                        .HasColumnType("decimal(9,8)")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "BotId" }, "Purchases_fk1");

                    b.HasIndex(new[] { "Id" }, "id")
                        .IsUnique()
                        .HasDatabaseName("id1");

                    b.ToTable("purchases", (string)null);
                });

            modelBuilder.Entity("Models.Scaffolded.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EmailHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("email_hash");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("password_hash");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "EmailHash" }, "email_hash")
                        .IsUnique();

                    b.HasIndex(new[] { "Id" }, "id")
                        .IsUnique()
                        .HasDatabaseName("id2");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Models.Scaffolded.Bot", b =>
                {
                    b.HasOne("Models.Scaffolded.User", "Owner")
                        .WithMany("Bots")
                        .HasForeignKey("OwnerId")
                        .IsRequired()
                        .HasConstraintName("Bots_fk1");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Models.Scaffolded.Botstatesnapshot", b =>
                {
                    b.HasOne("Models.Scaffolded.Bot", "Bot")
                        .WithMany()
                        .HasForeignKey("BotId")
                        .IsRequired()
                        .HasConstraintName("BotStateSnapshots_fk0");

                    b.Navigation("Bot");
                });

            modelBuilder.Entity("Models.Scaffolded.Purchase", b =>
                {
                    b.HasOne("Models.Scaffolded.Bot", "Bot")
                        .WithMany("Purchases")
                        .HasForeignKey("BotId")
                        .IsRequired()
                        .HasConstraintName("Purchases_fk1");

                    b.Navigation("Bot");
                });

            modelBuilder.Entity("Models.Scaffolded.Bot", b =>
                {
                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("Models.Scaffolded.User", b =>
                {
                    b.Navigation("Bots");
                });
#pragma warning restore 612, 618
        }
    }
}
